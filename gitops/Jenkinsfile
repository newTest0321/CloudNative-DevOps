pipeline {
    agent any
    
    parameters {
        string(name: 'FRONTEND_DOCKER_TAG', defaultValue: 'latest', description: 'Frontend Docker tag from CI pipeline')
        string(name: 'BACKEND_DOCKER_TAG', defaultValue: 'latest', description: 'Backend Docker tag from CI pipeline')
    }

    environment {
        GIT_REPO_URL = "https://github.com/atkaridarshan04/CloudNative-DevOps-Blueprint.git"
        GIT_BRANCH = "main"
        DOCKER_USERNAME = "atkaridarshan04"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
                echo "Workspace cleaned"
            }
        }
        
        stage('Checkout Code') {
            steps {
                git url: "${GIT_REPO_URL}", branch: "${GIT_BRANCH}"
                echo "Code checked out from GitHub"
            }
        }
        
        stage('Verify Docker Tags') {
            steps {
                echo "Frontend Docker Tag: ${params.FRONTEND_DOCKER_TAG}"
                echo "Backend Docker Tag: ${params.BACKEND_DOCKER_TAG}"
                
                // Validate tags are not empty
                script {
                    if (params.FRONTEND_DOCKER_TAG == '' || params.BACKEND_DOCKER_TAG == '') {
                        error "Docker tags cannot be empty!"
                    }
                }
            }
        }
        
        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    // Update backend manifest
                    dir('kubernetes') {
                        sh """
                            echo "Updating backend image tag..."
                            sed -i 's|image: ${DOCKER_USERNAME}/bookstore-backend:.*|image: ${DOCKER_USERNAME}/bookstore-backend:${params.BACKEND_DOCKER_TAG}|g' backend.yml
                        """
                    }
                    
                    // Update frontend manifest
                    dir('kubernetes') {
                        sh """
                            echo "Updating frontend image tag..."
                            sed -i 's|image: ${DOCKER_USERNAME}/bookstore-frontend:.*|image: ${DOCKER_USERNAME}/bookstore-frontend:${params.FRONTEND_DOCKER_TAG}|g' frontend.yml
                        """
                    }
                    
                    echo "Kubernetes manifests updated successfully"
                }
            }
        }
        
        stage('Commit and Push Changes') {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'github-token', gitToolName: 'Default')]) {
                    sh """
                        git config user.email "jenkins@ci.com"
                        git config user.name "Jenkins GitOps"
                        
                        echo "Checking git status..."
                        git status

                        echo "Adding changes..."
                        git add kubernetes/*.yml
                        
                        echo "Committing changes..."
                        git commit -m "GitOps: Update image tags to frontend:${params.FRONTEND_DOCKER_TAG}, backend:${params.BACKEND_DOCKER_TAG}" || echo "No changes to commit"
                        
                        echo "Pushing to GitHub..."
                        git push ${GIT_REPO_URL} ${GIT_BRANCH}
                    """
                }
                echo "Changes pushed to GitHub successfully"
            }
        }
    }

    post {
        always {
            echo "GitOps pipeline execution completed"
        }
        
        success {
            echo "‚úÖ GitOps pipeline completed successfully!"
            echo "üì¶ Updated images:"
            echo "   Frontend: ${DOCKER_USERNAME}/bookstore-frontend:${params.FRONTEND_DOCKER_TAG}"
            echo "   Backend: ${DOCKER_USERNAME}/bookstore-backend:${params.BACKEND_DOCKER_TAG}"
            
            // Send notification email
            script {
                emailext(
                    subject: "‚úÖ GitOps Deployment Success - BookStore App",
                    body: """
                        <h2>üöÄ GitOps Deployment Successful</h2>
                        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
                        <p><strong>Build:</strong> ${env.BUILD_NUMBER}</p>
                        <p><strong>Status:</strong> ${currentBuild.result}</p>
                        
                        <h3>üì¶ Updated Images:</h3>
                        <ul>
                            <li>Frontend: ${DOCKER_USERNAME}/bookstore-frontend:${params.FRONTEND_DOCKER_TAG}</li>
                            <li>Backend: ${DOCKER_USERNAME}/bookstore-backend:${params.BACKEND_DOCKER_TAG}</li>
                        </ul>
                        
                        <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        
                        <p><em>ArgoCD will automatically sync these changes to the cluster.</em></p>
                    """,
                    to: 'atkaridarshan04@gmail.com',
                    mimeType: 'text/html'
                )
            }
        }
        
        failure {
            echo "‚ùå GitOps pipeline failed!"
            
            // Send failure notification
            script {
                emailext(
                    subject: "‚ùå GitOps Deployment Failed - BookStore App",
                    body: """
                        <h2>üö® GitOps Deployment Failed</h2>
                        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
                        <p><strong>Build:</strong> ${env.BUILD_NUMBER}</p>
                        <p><strong>Status:</strong> ${currentBuild.result}</p>
                        
                        <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        
                        <p>Please check the build logs for details.</p>
                    """,
                    to: 'atkaridarshan04@gmail.com',
                    mimeType: 'text/html'
                )
            }
        }
    }
}
